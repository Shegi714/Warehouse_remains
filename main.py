import os
import time
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
from oauth2client.service_account import ServiceAccountCredentials
from io import StringIO

# üß™ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è GitHub Secrets)
SOURCE_SHEET_ID = os.environ.get("SOURCE_SHEET_ID")
TARGET_SHEET_ID = os.environ.get("TARGET_SHEET_ID")
GOOGLE_CREDS_PATH = os.environ.get("GOOGLE_CREDS_PATH")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.environ.get("GOOGLE_CREDS_JSON")
if not creds_json:
    raise ValueError("GOOGLE_CREDS_JSON not set or empty!")

# üß† –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–∞–π–ª-like –æ–±—ä–µ–∫—Ç
creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# üìë –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
source_sheet = client.open_by_key(SOURCE_SHEET_ID).sheet1
rows = source_sheet.get_all_values()[1:]
data = [{"token": row[0], "cabinet": row[1]} for row in rows if len(row) >= 2 and row[0].strip()]


# üì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
params = {
    "locale": "ru",
    "groupByBrand": "false",
    "groupBySubject": "false",
    "groupBySa": "true",
    "groupByNm": "true",
    "groupByBarcode": "true",
    "groupBySize": "true",
    "filterPics": "0",
    "filterVolume": "0"
}

# üîÅ –†–µ—Ç—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
def create_report(token, retries=3, delay=5):
    url = "https://seller-analytics-api.wildberries.ru/api/v1/warehouse_remains"
    headers = {
        "accept": "application/json",
        "Authorization": f"Bearer {token}",
        "User-Agent": "Mozilla/5.0"
    }

    for attempt in range(1, retries + 1):
        try:
            print(f"üì° [{attempt}/{retries}] –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
            response = requests.get(url, headers=headers, params=params, timeout=30)
            response.raise_for_status()
            json_data = response.json()
            task_id = json_data.get("data", {}).get("taskId") or json_data.get("taskId")
            if task_id:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω taskId: {task_id}")
                return task_id
            else:
                print(f"‚ùó –ù–µ—Ç taskId –≤ –æ—Ç–≤–µ—Ç–µ: {json_data}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        time.sleep(delay)
    return None

# ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ (–¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫)
def wait_for_report(token, task_id, cabinet_name, retries=20, delay=10):
    url = f"https://seller-analytics-api.wildberries.ru/api/v1/warehouse_remains/tasks/{task_id}/download"
    headers = {
        "accept": "application/json",
        "Authorization": f"Bearer {token}",
        "User-Agent": "Mozilla/5.0"
    }

    print(f"‚è≥ –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π taskId –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet_name}...")
    time.sleep(delay)  # üí• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    for attempt in range(1, retries + 1):
        try:
            print(f"üîÅ [{attempt}/{retries}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {cabinet_name}...")
            response = requests.get(url, headers=headers, timeout=30)

            if response.status_code == 200:
                print(f"‚úÖ –û—Ç—á–µ—Ç –¥–ª—è {cabinet_name} –≥–æ—Ç–æ–≤.")
                return response.json()

            elif response.status_code == 401:
                print(f"‚ùå –¢–æ–∫–µ–Ω –¥–ª—è {cabinet_name} –Ω–µ—Ä–∞–±–æ—á–∏–π (401 Unauthorized).")
                return None

            elif response.status_code == 429:
                print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429). –ñ–¥—ë–º {delay}s...")

            elif response.status_code == 404:
                print(f"‚ÑπÔ∏è –û—Ç—á–µ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ (404). –ñ–¥—ë–º...")

            else:
                print(f"‚ùó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}: {response.text}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {cabinet_name}: {e}")

        time.sleep(delay)

    print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {cabinet_name}. –û—Ç—á–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
    return None


# üìä –ó–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞ –≤ Google Sheets
from datetime import datetime

def write_report_to_sheet(sheet_obj, cabinet_name, report_data):
    try:
        today = datetime.now().strftime("%d-%m-%Y")

        try:
            worksheet = sheet_obj.worksheet(cabinet_name)
            worksheet.clear()
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet_obj.add_worksheet(title=cabinet_name, rows="1000", cols="10")

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–î–∞—Ç–∞", "nmId", "barcode", "", "", "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB", "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"]
        rows = [headers]

        for item in report_data:
            nm_id = item.get("nmId", "")
            barcode = item.get("barcode", "")
            warehouses = {w["warehouseName"]: w["quantity"] for w in item.get("warehouses", [])}

            row = [
                today,
                nm_id,
                barcode,
                "", "",  # D, E ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ –¢–ó
                warehouses.get("–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", 0),
                warehouses.get("–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB", 0),
                warehouses.get("–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö", 0)
            ]
            rows.append(row)

        worksheet.update(rows)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ª–∏—Å—Ç '{cabinet_name}'")

    except Exception as e:
        print(f"üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç '{cabinet_name}': {e}")


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    target_sheet = client.open_by_key(TARGET_SHEET_ID)

    for entry in data:
        cabinet = entry["cabinet"]
        token = entry["token"]
        print(f"\nüîÑ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º: {cabinet}")

        task_id = create_report(token)
        if not task_id:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ {cabinet}, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç.")
            continue

        report = wait_for_report(token, task_id, cabinet)
        if not report:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ {cabinet}, –æ—Ç—á–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤.")
            continue

        write_report_to_sheet(target_sheet, cabinet, report)

if __name__ == "__main__":
    main()
